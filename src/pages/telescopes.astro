---
import Layout from '../layouts/Layout.astro';
import '../styles/telescopes.css';
import '../styles/cards.css';

const allPosts = await Astro.glob('./posts/*.{md,mdx}');
const telescopePosts = allPosts.filter(p => p.frontmatter.subcategory === 'telescopes');
const telescopeCount = telescopePosts.length;

// ── CATEGORY ICONS (inline SVG strings; all inherit currentColor) ──
const ICONS: Record<string, string> = {
  all: `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <rect x="6" y="10" width="12" height="8" rx="2"/>
    <rect x="20" y="10" width="22" height="8" rx="2"/>
    <rect x="6" y="26" width="20" height="8" rx="2"/>
    <rect x="28" y="26" width="14" height="8" rx="2"/>
  </g>
</svg>`,

  "Dobsonian": `
<svg viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- base pad (squashed ellipse) -->
    <ellipse cx="24" cy="36" rx="13" ry="7"/>
    <!-- optical tube: tall rounded-rect, standing on the ellipse -->
    <!-- pivot at the contact point (22,33.5); rotate slightly clockwise (right) -->
    <rect x="17" y="3.5" width="10" height="30" rx="4" ry="4"
          transform="rotate(18 22 33.5)"/>
  </g>
</svg>`,

  "Tabletop Dobsonian": `
<svg viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- base (squashed for a slight 3D vibe) -->
    <ellipse cx="24" cy="38" rx="13" ry="7"/>
    <!-- vertical post standing on the ellipse -->
    <rect x="21" y="24" width="6" height="10" rx="1.5"/>
    <!-- tabletop -->
    <rect x="10" y="16" width="28" height="8" rx="2"/>
  </g>
</svg>`,

  "Refractor": `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- long lens tube -->
    <path d="M8 18 l22  -6 l2 6 l-22 6 z"/>
    <!-- diagonal + focuser hint -->
    <path d="M27 16 l4 4"/>
    <!-- alt-az head -->
    <path d="M18 28 l6 -4 l4 2"/>
    <!-- tripod -->
    <path d="M18 28 l-6 10 M24 26 l2 12 M28 30 l8 8"/>
  </g>
</svg>`,

  "Reflector": `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- newtonian tube -->
    <path d="M10 19 l20 -7 l3 7 l-20 7 z"/>
    <!-- secondary spider hint -->
    <path d="M24 18 l3 3"/>
    <!-- eq mount + tripod -->
    <path d="M20 30 l6 -6 l4 2"/>
    <path d="M20 30 l-6 10 M26 24 l2 14 M30 28 l8 10"/>
  </g>
</svg>`,

  "Maksutov-Cassegrain": `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- compact closed tube -->
    <rect x="10" y="16" width="22" height="10" rx="4"/>
    <!-- back cell -->
    <rect x="30" y="18" width="6" height="6" rx="2"/>
    <!-- fork/alt-az + small tripod -->
    <path d="M22 30 h6 m-3 0 v4"/>
    <path d="M20 34 l-6 8 M25 34 l1 10 M30 34 l8 8"/>
  </g>
</svg>`,

  "Schmidt-Cassegrain": `
<svg viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- tripod -->
    <ellipse cx="24" cy="30" rx="4" ry="2"/>
    <path d="M24 30 v14 M24 44 L14 46 M24 44 L34 46"/>

    <!-- single fork arm + altitude joint -->
    <rect x="26" y="20" width="4" height="10" rx="2"/>
    <circle cx="28" cy="20" r="3"/>

    <!-- optical tube (short, fat) with front corrector ring; tilted slightly up -->
    <g transform="rotate(-15 28 18)">
      <rect x="18" y="14" width="16" height="6" rx="2"/>
      <circle cx="18" cy="17" r="3"/>
    </g>
  </g>
</svg>`,

  "Smart Telescope": `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- upright smart body -->
    <rect x="16" y="10" width="16" height="20" rx="4"/>
    <circle cx="24" cy="18" r="2.5"/>
    <!-- single arm + base -->
    <path d="M28 30 v4 h-8 v-4"/>
    <rect x="14" y="34" width="20" height="4" rx="2"/>
  </g>
</svg>`,

  "Other": `
<svg viewBox="0 0 48 48" width="48" height="48" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
  <g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M24 8 v8 M24 32 v8 M8 24 h8 M32 24 h8"/>
    <circle cx="24" cy="24" r="6"/>
  </g>
</svg>`
};

// ── SORTED “All” POSTS ──
const sortedAll = [...telescopePosts].sort(
  (a, b) => (b.frontmatter.rating?.overall ?? 0) - (a.frontmatter.rating?.overall ?? 0)
);

// ── GROUP & SORT BY TYPE ──
const grouped = telescopePosts.reduce((acc, post) => {
  const type = post.frontmatter.telescopeType || 'Other';
  (acc[type] ??= []).push(post);
  return acc;
}, {});
const types = Object.keys(grouped).sort();
const sortedGrouped = Object.fromEntries(
  types.map(type => [
    type,
    [...grouped[type]].sort(
      (a, b) => (b.frontmatter.rating?.overall ?? 0) - (a.frontmatter.rating?.overall ?? 0)
    ),
  ])
);
---

<Layout title="Telescope Reviews">
  <div class="telescopes-toggle-container">
    <!-- toggle buttons -->
  <div class="toggle-buttons" role="tablist" aria-label="Telescope categories">
    <button data-type="all" class="icon-button active" role="tab" aria-selected="true">
      <span class="icon" set:html={ICONS.all}></span>
      <span class="label">All</span>
    </button>
    {types.map(t => (
      <button data-type={t} class="icon-button" role="tab" aria-selected="false">
        <span class="icon" set:html={ICONS[t] || ICONS["Other"]}></span>
        <span class="label">{t}</span>
      </button>
    ))}
  </div>

    <!-- description placeholder -->
    <div id="type-description" class="type-description" data-count={telescopeCount}></div>

   <!-- “All” group -->
    <div class="post-group" data-type="all">
      <h2>All Telescopes</h2>
      <div class="post-grid">
        {sortedAll.map(({ frontmatter, url }) => {
          const { title, description, rating, writer, pubDate, affiliate = {} } = frontmatter;
          const cleanTitle = title.replace(/ (Review|Overview)$/, '');
          const score = rating?.overall ?? 'N/A';
          const affs = [
            ['Amazon', affiliate.amazon],
            ['HighPoint', affiliate.highpointscientific],
            ['Astroshop', affiliate.astroshop],
          ].filter(([, link]) => link);

          return (
            <div class="post-card post-card--review">
              <a href={url} class="post-card-link">
                <div class="post-card-title">{cleanTitle}</div>

                {(writer || pubDate) && (
                  <div class="post-card-meta">
                    {writer ? `By ${writer}` : ''}{writer && pubDate ? ' — ' : ''}
                    {pubDate ? new Date(pubDate).toLocaleDateString() : ''}
                  </div>
                )}

                <p class="post-card-desc">{description}</p>

                <div class="post-card-footer has-badge">
                  <div class="post-card-badges">
                    <span class="review-badge">Review</span>
                    <span class="score-badge">{score}/10</span>
                  </div>
                  <div class="read-post">Read the review →</div>
                </div>
              </a>

              {affs.length > 0 && (
                <div class="affiliate-links">
                  {affs.map(([name, link]) => (
                    <a href={link} class="affiliate-btn" target="_blank" rel="noopener">
                      Buy on {name}
                    </a>
                  ))}
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>

    {/* one group per type */}
    {types.map(type => (
      <div class="post-group" data-type={type} style="display:none;">
        <h2>{type} Telescopes</h2>
        <div class="post-grid">
          {sortedGrouped[type].map(({ frontmatter, url }) => {
            const { title, description, rating, writer, pubDate, affiliate = {} } = frontmatter;
            const cleanTitle = title.replace(/ (Review|Overview)$/, '');
            const score = rating?.overall ?? 'N/A';
            const affs = [
              ['Amazon', affiliate.amazon],
              ['HighPoint', affiliate.highpointscientific],
              ['Astroshop', affiliate.astroshop],
            ].filter(([, link]) => link);

            return (
              <div class="post-card post-card--review">
                <a href={url} class="post-card-link">
                  <div class="post-card-title">{cleanTitle}</div>

                  {(writer || pubDate) && (
                    <div class="post-card-meta">
                      {writer ? `By ${writer}` : ''}{writer && pubDate ? ' — ' : ''}
                      {pubDate ? new Date(pubDate).toLocaleDateString() : ''}
                    </div>
                  )}

                  <p class="post-card-desc">{description}</p>

                  <div class="post-card-footer has-badge">
                    <div class="post-card-badges">
                      <span class="review-badge">Review</span>
                      <span class="score-badge">{score}/10</span>
                    </div>
                    <div class="read-post">Read the review →</div>
                  </div>
                </a>

                {affs.length > 0 && (
                  <div class="affiliate-links">
                    {affs.map(([name, link]) => (
                      <a href={link} class="affiliate-btn" target="_blank" rel="noopener">
                        Buy on {name}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    ))}
  </div>

  <div id="type-description" class="type-description" ></div>


  <script type="module" client:load>
    // define everything in here

    const descEl  = document.getElementById('type-description');
    const TELESCOPE_COUNT = Number(descEl.dataset.count);
    const formattedCount = new Intl.NumberFormat().format(TELESCOPE_COUNT);
    
    const typeDescriptions = {
      all: `Browse reviews of ${formattedCount} telescopes—find your perfect match in one place.`,
      Dobsonian: "Dobsonians are large-aperture Newtonian reflectors on simple rocker-box mounts—ideal for sweeping deep-sky views.",
      "Tabletop Dobsonian": "A compact Dobsonian you can set on any table—perfect for quick setup and on-the-go observing.",
      Refractor: "Refractors use precision lenses for crisp, high-contrast views of planets, the Moon, and double stars.",
      Reflector: "Classic Newtonian reflectors with mirrors—great light-gathering at an affordable price.",
      "Maksutov-Cassegrain": "Maksutovs pack long focal lengths into small tubes for sharp planetary and lunar views.",
      "Schmidt-Cassegrain": "Schmidts combine mirrors and lenses in a compact, versatile package for both planets and deep-sky objects.",
      "Smart Telescope": "App-controlled scopes automate alignment and tracking—perfect for hands-free stargazing.",
      Other: "Unique designs and hybrids—explore these if you’re craving something different.",
    };

    const buttons = document.querySelectorAll('.toggle-buttons button');
    const groups  = document.querySelectorAll('.post-group');

    function showGroup(type) {
      // toggle visibility
      groups.forEach(g => {
        g.style.display = type === 'all'
          ? (g.dataset.type === 'all' ? '' : 'none')
          : (g.dataset.type === type ? '' : 'none');
      });
      // update description text
      descEl.textContent = typeDescriptions[type] || '';
    }

    // wire up buttons & initial state
    buttons.forEach(btn =>
      btn.addEventListener('click', () => {
        buttons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        showGroup(btn.dataset.type);
      })
    );

    // show “all” on first load
    showGroup('all');
  </script>
</Layout>