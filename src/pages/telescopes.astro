---
import Layout from '../layouts/Layout.astro';
import '../styles/telescopes.css';

const allPosts = await Astro.glob('./posts/*.{md,mdx}');
const telescopePosts = allPosts.filter(p => p.frontmatter.subcategory === 'telescopes');

// Sort all
const sortedAll = [...telescopePosts].sort(
  (a, b) => (b.frontmatter.rating?.overall ?? 0) - (a.frontmatter.rating?.overall ?? 0)
);

// Group by type
const grouped = telescopePosts.reduce((acc, post) => {
  const type = post.frontmatter.telescopeType || 'Other';
  (acc[type] ??= []).push(post);
  return acc;
}, {});

// Types list
const types = Object.keys(grouped).sort();

// Sort each group
const sortedGrouped = Object.fromEntries(
  types.map(type => [
    type,
    [...grouped[type]].sort(
      (a, b) => (b.frontmatter.rating?.overall ?? 0) - (a.frontmatter.rating?.overall ?? 0)
    ),
  ])
);

const typeDescriptions = {
  all: "Browse reviews of every telescope style—find your perfect match in one place.",
  Dobsonian: "Dobsonians are large-aperture Newtonian reflectors on simple rocker-box mounts—ideal for sweeping views of galaxies and nebulae.",
  "Tabletop Dobsonian": "A compact Dobsonian you can set on any table—great for quick setups and deep-sky observing on the go.",
  Refractor: "Refractors use precision lenses for crisp, high-contrast views of planets, the Moon, and double stars.",
  Reflector: "Classic Newtonian reflectors with mirrors—your best bet for lots of light-gathering at an affordable price.",
  "Maksutov-Cassegrain": "Maksutov-Cassegrains pack long focal lengths into small tubes for sharp planetary and lunar views in a portable package.",
  "Schmidt-Cassegrain": "Schmidt-Cassegrains combine mirrors and lenses for a versatile, all-around scope that’s compact and travel-friendly.",
  "Smart Telescope": "App-controlled ‘smart’ scopes automate alignment and object tracking—perfect if you want hands-off stargazing.",
  Other: "Unique designs and hybrids—explore these if you’re craving something a little different.",
};
---

<Layout title="Telescope Reviews">
  <div class="telescopes-toggle-container">
    <div class="toggle-buttons">
      <button data-type="all" class="active">All</button>
      {types.map(t => <button data-type={t}>{t}</button>)}
    </div>

    <div id="type-description" class="type-description">
      {typeDescriptions.all}
    </div>
    
    <!-- All Group -->
    <div class="post-group" data-type="all">
      <h2>All Telescopes</h2>
      <div class="telescopes-grid">
        {sortedAll.map(({ frontmatter, url }) => {
          const { title, description, rating, affiliate = {} } = frontmatter;
          const cleanTitle = title.replace(/ Review$/, '');
          const score = rating?.overall ?? 'N/A';
          // Collect only existing affiliate links
          const affs = [
            ['Amazon', affiliate.amazon],
            ['HighPoint', affiliate.highpointscientific],
            ['Astroshop', affiliate.astroshop],
          ].filter(([, link]) => link);

          return (
            <div class="telescopes-card">
              <a href={url} class="telescopes-link">
                <div class="telescopes-title">{cleanTitle}</div>
                <div class="telescopes-rating">{score}/10</div>
                <p class="telescopes-desc">{description}</p>
              </a>
              {affs.length > 0 && (
                <div class="affiliate-links">
                  {affs.map(([name, link]) => (
                    <a
                      href={link}
                      class="affiliate-btn"
                      target="_blank"
                      rel="noopener"
                    >
                      Buy on {name}
                    </a>
                  ))}
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>

    {/* One group per type */}
    {types.map(type => (
      <div class="post-group" data-type={type} style="display:none;">
        <h2>{type} Telescopes</h2>
        <div class="telescopes-grid">
          {sortedGrouped[type].map(({ frontmatter, url }) => {
            const { title, description, rating, affiliate = {} } = frontmatter;
            const cleanTitle = title.replace(/ Review$/, '');
            const score = rating?.overall ?? 'N/A';
            const affs = [
              ['Amazon', affiliate.amazon],
              ['HighPoint', affiliate.highpointscientific],
              ['Astroshop', affiliate.astroshop],
            ].filter(([, link]) => link);

            return (
              <div class="telescopes-card">
                <a href={url} class="telescopes-link">
                  <div class="telescopes-title">{cleanTitle}</div>
                  <div class="telescopes-rating">{score}/10</div>
                  <p class="telescopes-desc">{description}</p>
                  <div class="read-review">Read full review →</div>
                </a>
                {affs.length > 0 && (
                  <div class="affiliate-links">
                    {affs.map(([name, link]) => (
                      <a
                        href={link}
                        class="affiliate-btn"
                        target="_blank"
                        rel="noopener"
                      >
                        Buy on {name}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    ))}

  </div>

  <script type="module" client:load>
    const buttons = document.querySelectorAll('.toggle-buttons button');
    const groups  = document.querySelectorAll('.post-group');
    const desc    = document.getElementById('type-description');

    function showGroup(type) {
      // toggle which post-group is visible
      groups.forEach(grp =>
        grp.style.display =
          type === 'all'
            ? grp.dataset.type === 'all' ? '' : 'none'
            : grp.dataset.type === type ? '' : 'none'
      );
      // ➍ update the description text
      desc.textContent = typeDescriptions[type] || "";
    }

    buttons.forEach(btn =>
      btn.addEventListener('click', () => {
        buttons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        showGroup(btn.dataset.type);
      })
    );
  </script>
</Layout>